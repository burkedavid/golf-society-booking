// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  phone        String?
  memberNumber String    @unique
  handicap     Int       @default(28)
  role         String    @default("member") // 'admin' | 'member'
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]

  @@map("users")
}

model Outing {
  id                   String    @id @default(cuid())
  name                 String
  description          String?
  date                 DateTime
  time                 String
  venue                String
  capacity             Int
  memberPrice          Float
  guestPrice           Float
  registrationDeadline DateTime
  status               String    @default("active") // 'open' | 'closed' | 'cancelled'
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  bookings             Booking[]
  menu                 Menu?

  @@map("outings")
}

model Menu {
  id                 String   @id @default(cuid())
  outingId           String   @unique
  mainCourseOptions  String   // JSON string
  dessertOptions     String   // JSON string
  createdAt          DateTime @default(now())
  outing             Outing   @relation(fields: [outingId], references: [id], onDelete: Cascade)

  @@map("menus")
}

model Booking {
  id            String   @id @default(cuid())
  userId        String
  outingId      String
  memberHandicap Int
  guests        String   @default("[]") // JSON string
  memberMeals   String   // JSON string - now includes mainCourse and dessert for member
  guestMeals    String   @default("[]") // JSON string - array of meal choices for each guest
  totalCost     Float
  status        String   @default("pending") // 'pending' | 'confirmed' | 'cancelled'
  paymentStatus String   @default("pending") // 'pending' | 'paid'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  outing        Outing   @relation(fields: [outingId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model CommonMainCourse {
  id          String   @id @default(cuid())
  name        String
  description String
  allergens   String   // JSON array of allergen strings
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("common_main_courses")
}

model CommonDessert {
  id          String   @id @default(cuid())
  name        String
  description String
  allergens   String   // JSON array of allergen strings
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("common_desserts")
} 